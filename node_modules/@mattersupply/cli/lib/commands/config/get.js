"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const command_1 = require("@oclif/command");
const chalk = require("chalk");
const command_2 = require("../../command");
const remote_config_1 = require("../../remote-config");
const aws_1 = require("../../aws");
class GetCommand extends command_2.BaseCommand {
    async run() {
        const { flags } = this.parse(GetCommand);
        await this.getConfigValues(flags.stage, flags.entry);
    }
    async getConfigValues(stages, entries) {
        var _a;
        const ssm = aws_1.createSSMConfigManager(this.cfg);
        this.log(`Fetching Values: ${chalk.green.bold((_a = this.cfg) === null || _a === void 0 ? void 0 : _a.get('app.name'))} (${chalk.green(stages.join(', '))})`);
        await Promise.all(lodash_1.flatMap(stages, async (stage) => entries.map(async (entry) => {
            var _a;
            const value = await ssm
                .getParameter({
                Name: remote_config_1.RemoteConfigurationPath.pathFromKey(entry, stage, this.cfg),
            })
                .promise();
            this.log(`Value ${chalk.green.bold(entry)} = ${chalk.green((_a = value.Parameter) === null || _a === void 0 ? void 0 : _a.Value)} (${stage})`);
        })));
    }
}
exports.GetCommand = GetCommand;
GetCommand.description = `
Get configuration entries from multiple stages.`;
GetCommand.examples = [
    `$ matter config:get -s develop -s local -e foo=bar -e baz=boz
  Fetching Values: mattersupplyco (develop, local)
  Value baz = boz (develop)
  Value foo = bar (local)
  Value baz = boz (local)
  Value foo = bar (develop)`,
];
GetCommand.flags = Object.assign(Object.assign({}, command_2.BaseCommand.flags), { entry: command_1.flags.string({
        multiple: true,
        required: true,
        char: 'e',
        description: 'Entry/Entries to fetch.',
    }), stage: command_1.flags.string({
        multiple: true,
        required: true,
        char: 's',
        description: 'Stage(s) (environment).',
    }) });
GetCommand.args = [...command_2.BaseCommand.args];
