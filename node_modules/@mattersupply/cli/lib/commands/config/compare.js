"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const command_1 = require("@oclif/command");
const chalk = require("chalk");
const command_2 = require("../../command");
const remote_config_1 = require("../../remote-config");
const aws_1 = require("../../aws");
class CompareCommand extends command_2.BaseCommand {
    async run() {
        const { flags } = this.parse(CompareCommand);
        await this.validateConfigurations(flags.stage);
    }
    async validateConfigurations(stages = []) {
        var _a, _b;
        if (stages.length === 0) {
            stages = ((_a = this.cfg) === null || _a === void 0 ? void 0 : _a.get('environments')) || [];
        }
        const ssm = aws_1.createSSMConfigManager(this.cfg);
        this.log(`Validating Configurations: ${chalk.green.bold((_b = this.cfg) === null || _b === void 0 ? void 0 : _b.get('app.name'))} (${chalk.green(stages.join(', '))})`);
        const configurationsByStage = {};
        const configurations = await Promise.all(stages.map(async (stage) => {
            const values = await remote_config_1.fetchValues(stage, this.cfg);
            const parameterList = values.Parameters;
            if (parameterList) {
                const keyed = remote_config_1.descriptionsByKey(parameterList, stage, this.cfg);
                configurationsByStage[stage] = keyed;
                return keyed;
            }
            return {};
        }));
        const allKeys = lodash_1.uniq(lodash_1.flatMap(configurations.map((c) => Object.keys(c))));
        const mismatchingTypes = [];
        const missingValues = [];
        // Validating that all values exist in all objects and that the types match.
        allKeys.map((key) => {
            let type = null;
            stages.map((stage) => {
                const entry = configurationsByStage[stage][key];
                if (!entry) {
                    // Entry doesn't exist for this environment
                    missingValues.push({ stage, key });
                }
                else if (type && entry.Type !== type) {
                    // Entry exists in this environment but the type of another environment differs.
                    mismatchingTypes.push({ stage, key, expectedType: type, type: entry.Type || 'String' });
                }
                else if (type === null) {
                    // If the type is null, we need to set it for the first time, to compare to other environments.
                    type = entry.Type || 'String';
                }
            });
            type = null;
        });
        if (missingValues.length > 0) {
            this.log(chalk.red.bold(`Missing Values:`));
            missingValues.map((v) => {
                this.log(chalk.red(`  ${v.stage}: ${chalk.bold(v.key)}`));
            });
        }
        else {
            this.log(chalk.green(`All values present in configurations: ${chalk.bold(stages.join(', '))}`));
        }
        if (mismatchingTypes.length > 0) {
            this.log(chalk.red.bold(`Mismatching Types:`));
            mismatchingTypes.map((v) => {
                this.log(chalk.red(`  ${v.stage}: ${chalk.bold(v.key)}: Expected ${chalk.bold(v.expectedType)}, found ${chalk.bold(v.type)}`));
            });
        }
        else {
            this.log(chalk.green(`All present types match in configurations: ${chalk.bold(stages.join(', '))}`));
        }
        if (missingValues.length > 0) {
            process.exit(1);
        }
        if (mismatchingTypes.length > 0) {
            process.exit(1);
        }
    }
}
exports.CompareCommand = CompareCommand;
CompareCommand.description = `
Compare Configuration values and types for multiple stages.
Useful when you're comparing your configuration against someone else's or prior to promoting from one stage to another, ensuring you have all necessary values.
`;
CompareCommand.examples = [
    `$ matter config:compare -s develop local
  Validating Configurations: mattersupplyco (develop, local)
  Missing Values:
    local: apollo-key
    local: serverless-access-key
    develop: graphmatter-gateway
  All present types match in configurations: develop, local
`,
];
CompareCommand.flags = Object.assign(Object.assign({}, command_2.BaseCommand.flags), { stage: command_1.flags.string({
        multiple: true,
        required: true,
        char: 's',
        description: 'Stage(s) (environment) to compare.',
    }) });
CompareCommand.args = [...command_2.BaseCommand.args];
