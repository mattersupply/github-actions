"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const chalk = require("chalk");
const remote_config_1 = require("../../remote-config");
const fs_1 = require("fs");
class DescribeCommand extends command_2.BaseCommand {
    async run() {
        const { flags } = this.parse(DescribeCommand);
        const parameters = await remote_config_1.fetchValues(flags.stage, this.cfg);
        // this.log('information', 'info')
        // this.log('uh oh!', 'error')
        if (flags.format || flags.output) {
            const format = flags.format || 'dotenv';
            let output = '';
            const merged = remote_config_1.combineValues(parameters, this.cfg);
            if (format === 'dotenv') {
                output = remote_config_1.RemoteConfigurationFormatter.dotenv(merged);
            }
            else if (format === 'yaml') {
                output = remote_config_1.RemoteConfigurationFormatter.yaml(merged);
            }
            if (flags.output) {
                fs_1.writeFileSync(flags.output, Buffer.from(output));
                this.log(`Wrote values to: ${chalk.green.bold(flags.output)}`);
            }
            else {
                this.log(output);
            }
        }
        else {
            Object.entries(parameters).map(([stage, params]) => {
                var _a;
                this.log(`Configuration Values: ${chalk.green.bold((_a = this.cfg) === null || _a === void 0 ? void 0 : _a.get('app.name'))} (${chalk.green(stage)})`);
                this.log(params);
            });
        }
    }
}
exports.DescribeCommand = DescribeCommand;
DescribeCommand.aliases = ['config:print'];
DescribeCommand.description = `
Print configuration values for one or multiple stages.
When used with multiple environments and a format option, then the objects will be merged in order of appearance.
This allows us to also fetch default values from another environment, or have local overrides.`;
DescribeCommand.examples = [
    `$ matter config:describe -s develop
  ... Prints all SSM configuration values`,
    `$ matter config:describe -s fonne develop --format yaml
  ... Prints configuration values for Fonne, merged with Develop in YAML format.`,
    `$ matter config:describe -s fonne develop common build more andmore yetevenmore --format dotenv
  ... Prints configuration values for Fonne, merged with Develop etc. in Dotenv format.`,
];
DescribeCommand.flags = Object.assign(Object.assign({}, command_2.BaseCommand.flags), { format: command_1.flags.enum({
        description: 'Output parameters as dotenv or yaml file.',
        options: ['yaml', 'dotenv'],
    }), stage: command_1.flags.string({
        multiple: true,
        required: true,
        char: 's',
        description: 'Stage (environment) to print.',
    }), output: command_1.flags.string({
        char: 'o',
        description: 'Output filed path',
    }) });
DescribeCommand.args = [...command_2.BaseCommand.args];
