"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const chalk = require("chalk");
const js_yaml_1 = require("js-yaml");
const remote_config_1 = require("../../remote-config");
class DescribeCommand extends command_2.BaseCommand {
    async run() {
        const { flags } = this.parse(DescribeCommand);
        const fetchedParameters = await Promise.all(flags.stage.map(async (stage) => ({ stage, values: await this.fetchValues(stage) })));
        const parameters = fetchedParameters.reduce((acc, value) => {
            acc[value.stage] = value.values;
            return acc;
        }, {});
        // this.log('information', 'info')
        // this.log('uh oh!', 'error')
        if (flags.format) {
            const merged = this.mergeDescriptions(parameters);
            if (flags.format === 'dotenv') {
                this.printDescriptionAsDotenv(merged);
            }
            else if (flags.format === 'yaml') {
                this.log(js_yaml_1.safeDump(merged));
            }
        }
        else {
            Object.entries(parameters).map(([stage, params]) => {
                var _a;
                this.log(`Configuration Values: ${chalk.green.bold((_a = this.cfg) === null || _a === void 0 ? void 0 : _a.get('app.name'))} (${chalk.green(stage)})`);
                this.log(params);
            });
        }
    }
    async fetchValues(stage) {
        return remote_config_1.fetchValues(stage, this.cfg);
    }
    printDescriptionAsDotenv(values) {
        Object.entries(values).map(([key, parameter]) => {
            if (!parameter.Name) {
                return;
            }
            const value = parameter.Value;
            this.log(`# Type: ${parameter.Type}, Version: ${parameter.Version}, Key: ${parameter.Name}`);
            this.log(`${lodash_1.toUpper(lodash_1.snakeCase(key))}=${value}`);
        });
    }
    descriptionsByKey(parameters, stage) {
        return remote_config_1.descriptionsByKey(parameters, stage, this.cfg);
    }
    mergeDescriptions(descriptions) {
        // Reduce over all stages
        const keyedDescriptions = Object.keys(descriptions).map((stage) => {
            return this.descriptionsByKey(descriptions[stage].Parameters || [], stage);
        });
        const merged = lodash_1.defaults(keyedDescriptions[0], ...keyedDescriptions);
        return merged;
    }
}
exports.DescribeCommand = DescribeCommand;
DescribeCommand.description = `
Print configuration values for one or multiple stages.
When used with multiple environments and a format option, then the objects will be merged in order of appearance.
This allows us to also fetch default values from another environment, or have local overrides.`;
DescribeCommand.examples = [
    `$ matter config:describe -s develop
  ... Prints all SSM configuration values`,
    `$ matter config:describe -s fonne develop --format yaml
  ... Prints configuration values for Fonne, merged with Develop in YAML format.`,
    `$ matter config:describe -s fonne develop common build more andmore yetevenmore --format dotenv
  ... Prints configuration values for Fonne, merged with Develop etc. in Dotenv format.`,
];
DescribeCommand.flags = Object.assign(Object.assign({}, command_2.BaseCommand.flags), { format: command_1.flags.enum({
        description: 'Output parameters as dotenv or yaml file.',
        options: ['yaml', 'dotenv'],
    }), stage: command_1.flags.string({
        multiple: true,
        required: true,
        char: 's',
        description: 'Stage (environment) to print.',
    }) });
DescribeCommand.args = [...command_2.BaseCommand.args];
