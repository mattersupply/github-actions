"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const command_1 = require("@oclif/command");
const chalk = require("chalk");
const command_2 = require("../../command");
const remote_config_1 = require("../../remote-config");
const aws_1 = require("../../aws");
class DeleteCommand extends command_2.BaseCommand {
    async run() {
        const { flags } = this.parse(DeleteCommand);
        await this.deleteConfigValues(flags.stage, flags.entry);
    }
    async deleteConfigValues(stages, entries) {
        var _a;
        const ssm = aws_1.createSSMConfigManager(this.cfg);
        this.log(`Deleting Values: ${chalk.green.bold((_a = this.cfg) === null || _a === void 0 ? void 0 : _a.get('app.name'))} (${chalk.green(stages.join(', '))})`);
        await Promise.all(lodash_1.flatMap(stages, async (stage) => entries.map(async (entry) => {
            await ssm
                .deleteParameter({
                Name: remote_config_1.RemoteConfigurationPath.pathFromKey(entry, stage, this.cfg),
            })
                .promise();
            this.log(`Deleted ${chalk.green.bold(entry)} (${stage})`);
        })));
    }
}
exports.DeleteCommand = DeleteCommand;
DeleteCommand.description = `
Deletes configuration entries across multiple stages.`;
DeleteCommand.examples = [
    `$ matter config:delete -s develop -s local -e foo -e baz
  Deleting Values: mattersupplyco (develop, local)
  Deleted baz (develop)
  Deleted foo (develop)
  Deleted baz (local)
  Deleted foo (local)`,
];
DeleteCommand.flags = Object.assign(Object.assign({}, command_2.BaseCommand.flags), { entry: command_1.flags.string({
        multiple: true,
        required: true,
        char: 'e',
        description: 'Entry/Entries to delete.',
    }), stage: command_1.flags.string({
        multiple: true,
        required: true,
        char: 's',
        description: 'Stage(s) (environment).',
    }) });
DeleteCommand.args = [...command_2.BaseCommand.args];
