"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const command_1 = require("@oclif/command");
const chalk = require("chalk");
const command_2 = require("../../command");
const remote_config_1 = require("../../remote-config");
const aws_1 = require("../../aws");
class SetCommand extends command_2.BaseCommand {
    async run() {
        const { flags } = this.parse(SetCommand);
        const entries = flags.entry.map((entry) => {
            const loc = entry.indexOf('=');
            return {
                key: entry.substring(0, loc).trim(),
                value: entry.substring(loc + 1).trim(),
                type: 'String',
            };
        });
        await this.setConfigValues(flags.stage, entries);
    }
    async setConfigValues(stages, entries) {
        var _a;
        const transformedValues = entries.map((entry) => {
            // Sanitizing input.
            entry.key = lodash_1.kebabCase(entry.key);
            return entry;
        });
        const ssm = aws_1.createSSMConfigManager(this.cfg);
        this.log(`Setting Values: ${chalk.green.bold((_a = this.cfg) === null || _a === void 0 ? void 0 : _a.get('app.name'))} (${chalk.green(stages.join(', '))})`);
        await Promise.all(lodash_1.flatMap(stages, async (stage) => {
            return transformedValues.map(async (entry) => {
                await ssm
                    .putParameter({
                    Name: remote_config_1.RemoteConfigurationPath.pathFromKey(entry.key, stage, this.cfg),
                    Description: entry.description || '',
                    Value: entry.value,
                    Type: entry.type || 'String',
                    Overwrite: true,
                })
                    .promise();
                this.log(`Set ${chalk.green.bold(entry.key)} = ${chalk.bold(entry.value)} (${stage})`);
                return;
            });
        }));
    }
}
exports.SetCommand = SetCommand;
SetCommand.description = `
Set configuration entries from multiple stages.`;
SetCommand.examples = [
    `$ matter config:set -s develop -s local -e foo=bar -e baz=boz
  Setting Values: mattersupplyco (develop, local)
  Set foo = bar (local)
  Set foo = bar (develop)
  Set baz = boz (local)
  Set baz = boz (develop)`,
];
SetCommand.flags = Object.assign(Object.assign({}, command_2.BaseCommand.flags), { entry: command_1.flags.string({
        multiple: true,
        required: true,
        char: 'e',
        description: 'Entry/Entries to set as `key=value`.',
    }), stage: command_1.flags.string({
        multiple: true,
        required: true,
        char: 's',
        description: 'Stage(s) (environment).',
    }) });
SetCommand.args = [...command_2.BaseCommand.args];
