"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const fs = require("fs");
const yaml = require("js-yaml");
const chalk = require("chalk");
const findUp = require("findup-sync");
exports.MATTER_CONFIG_PATH = `.matter`;
exports.MATTER_CONFIG_FILENAME = `config.yml`;
exports.MATTER_CONFIG_DEAULT_FILENAME = `matter.yml`;
// TODO: Are these sensible defaults?
const RequiredPaths = ['app.name'];
const ConfigDefaults = {
    app: {
        // name: '...' < This must be provided.
        org: `mattersupply`,
    },
    aws: {
        region: `us-east-1`,
        profile: `default`,
    },
    environments: [`develop`, `staging`, `production`],
};
async function getMatterConfig(path) {
    try {
        if (!path || !fs.existsSync(path)) {
            // Trying to find a config file by:
            // - matter.yml
            // - .config/matter.yml
            // - .matter/config.yml
            // Searching upwards from where we are right now.
            path = findUp([
                exports.MATTER_CONFIG_DEAULT_FILENAME,
                `.config/${exports.MATTER_CONFIG_DEAULT_FILENAME}`,
                `${exports.MATTER_CONFIG_PATH}/${exports.MATTER_CONFIG_FILENAME}`,
            ]);
        }
        if (!path) {
            throw new Error(`Unable to read config file: ${path}`);
        }
        const fileContents = fs.readFileSync(path, 'utf8');
        const data = yaml.safeLoad(fileContents);
        lodash_1.defaultsDeep(data, ConfigDefaults);
        data.get = function (path, defaultValue) {
            return lodash_1.get(data, path, defaultValue);
        };
        if (!data) {
            return undefined;
        }
        validate(data);
        // return data
        return data;
    }
    catch (e) {
        console.error(e);
    }
}
exports.getMatterConfig = getMatterConfig;
function validate(config) {
    RequiredPaths.map((path) => {
        const value = config.get(path);
        if (!value) {
            console.error(chalk.red.bold('Invalid Configuration:'), `${path} is required`);
            throw new Error(`${path} not found in configuration`);
        }
    });
}
exports.validate = validate;
